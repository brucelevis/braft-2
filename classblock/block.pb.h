// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: block.proto

#ifndef PROTOBUF_block_2eproto__INCLUDED
#define PROTOBUF_block_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace example {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_block_2eproto();
void protobuf_AssignDesc_block_2eproto();
void protobuf_ShutdownFile_block_2eproto();

class BlockRequest;
class BlockResponse;

// ===================================================================

class BlockRequest : public ::google::protobuf::Message {
 public:
  BlockRequest();
  virtual ~BlockRequest();

  BlockRequest(const BlockRequest& from);

  inline BlockRequest& operator=(const BlockRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlockRequest& default_instance();

  void Swap(BlockRequest* other);

  // implements Message ----------------------------------------------

  BlockRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlockRequest& from);
  void MergeFrom(const BlockRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 offset = 1;
  inline bool has_offset() const;
  inline void clear_offset();
  static const int kOffsetFieldNumber = 1;
  inline ::google::protobuf::int64 offset() const;
  inline void set_offset(::google::protobuf::int64 value);

  // optional int32 size = 2;
  inline bool has_size() const;
  inline void clear_size();
  static const int kSizeFieldNumber = 2;
  inline ::google::protobuf::int32 size() const;
  inline void set_size(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:example.BlockRequest)
 private:
  inline void set_has_offset();
  inline void clear_has_offset();
  inline void set_has_size();
  inline void clear_has_size();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 offset_;
  ::google::protobuf::int32 size_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_block_2eproto();
  friend void protobuf_AssignDesc_block_2eproto();
  friend void protobuf_ShutdownFile_block_2eproto();

  void InitAsDefaultInstance();
  static BlockRequest* default_instance_;
};
// -------------------------------------------------------------------

class BlockResponse : public ::google::protobuf::Message {
 public:
  BlockResponse();
  virtual ~BlockResponse();

  BlockResponse(const BlockResponse& from);

  inline BlockResponse& operator=(const BlockResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlockResponse& default_instance();

  void Swap(BlockResponse* other);

  // implements Message ----------------------------------------------

  BlockResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlockResponse& from);
  void MergeFrom(const BlockResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool success = 1;
  inline bool has_success() const;
  inline void clear_success();
  static const int kSuccessFieldNumber = 1;
  inline bool success() const;
  inline void set_success(bool value);

  // optional string redirect = 2;
  inline bool has_redirect() const;
  inline void clear_redirect();
  static const int kRedirectFieldNumber = 2;
  inline const ::std::string& redirect() const;
  inline void set_redirect(const ::std::string& value);
  inline void set_redirect(const char* value);
  inline void set_redirect(const char* value, size_t size);
  inline ::std::string* mutable_redirect();
  inline ::std::string* release_redirect();
  inline void set_allocated_redirect(::std::string* redirect);

  // @@protoc_insertion_point(class_scope:example.BlockResponse)
 private:
  inline void set_has_success();
  inline void clear_has_success();
  inline void set_has_redirect();
  inline void clear_has_redirect();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* redirect_;
  bool success_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_block_2eproto();
  friend void protobuf_AssignDesc_block_2eproto();
  friend void protobuf_ShutdownFile_block_2eproto();

  void InitAsDefaultInstance();
  static BlockResponse* default_instance_;
};
// ===================================================================

class BlockService_Stub;

class BlockService : public ::google::protobuf::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline BlockService() {};
 public:
  virtual ~BlockService();

  typedef BlockService_Stub Stub;

  static const ::google::protobuf::ServiceDescriptor* descriptor();

  virtual void write(::google::protobuf::RpcController* controller,
                       const ::example::BlockRequest* request,
                       ::example::BlockResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void read(::google::protobuf::RpcController* controller,
                       const ::example::BlockRequest* request,
                       ::example::BlockResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  ::google::protobuf::RpcController* controller,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  ::google::protobuf::Closure* done);
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(BlockService);
};

class BlockService_Stub : public BlockService {
 public:
  BlockService_Stub(::google::protobuf::RpcChannel* channel);
  BlockService_Stub(::google::protobuf::RpcChannel* channel,
                   ::google::protobuf::Service::ChannelOwnership ownership);
  ~BlockService_Stub();

  inline ::google::protobuf::RpcChannel* channel() { return channel_; }

  // implements BlockService ------------------------------------------

  void write(::google::protobuf::RpcController* controller,
                       const ::example::BlockRequest* request,
                       ::example::BlockResponse* response,
                       ::google::protobuf::Closure* done);
  void read(::google::protobuf::RpcController* controller,
                       const ::example::BlockRequest* request,
                       ::example::BlockResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::google::protobuf::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(BlockService_Stub);
};


// ===================================================================


// ===================================================================

// BlockRequest

// required int64 offset = 1;
inline bool BlockRequest::has_offset() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BlockRequest::set_has_offset() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BlockRequest::clear_has_offset() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BlockRequest::clear_offset() {
  offset_ = GOOGLE_LONGLONG(0);
  clear_has_offset();
}
inline ::google::protobuf::int64 BlockRequest::offset() const {
  return offset_;
}
inline void BlockRequest::set_offset(::google::protobuf::int64 value) {
  set_has_offset();
  offset_ = value;
}

// optional int32 size = 2;
inline bool BlockRequest::has_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BlockRequest::set_has_size() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BlockRequest::clear_has_size() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BlockRequest::clear_size() {
  size_ = 0;
  clear_has_size();
}
inline ::google::protobuf::int32 BlockRequest::size() const {
  return size_;
}
inline void BlockRequest::set_size(::google::protobuf::int32 value) {
  set_has_size();
  size_ = value;
}

// -------------------------------------------------------------------

// BlockResponse

// required bool success = 1;
inline bool BlockResponse::has_success() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BlockResponse::set_has_success() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BlockResponse::clear_has_success() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BlockResponse::clear_success() {
  success_ = false;
  clear_has_success();
}
inline bool BlockResponse::success() const {
  return success_;
}
inline void BlockResponse::set_success(bool value) {
  set_has_success();
  success_ = value;
}

// optional string redirect = 2;
inline bool BlockResponse::has_redirect() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BlockResponse::set_has_redirect() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BlockResponse::clear_has_redirect() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BlockResponse::clear_redirect() {
  if (redirect_ != &::google::protobuf::internal::kEmptyString) {
    redirect_->clear();
  }
  clear_has_redirect();
}
inline const ::std::string& BlockResponse::redirect() const {
  return *redirect_;
}
inline void BlockResponse::set_redirect(const ::std::string& value) {
  set_has_redirect();
  if (redirect_ == &::google::protobuf::internal::kEmptyString) {
    redirect_ = new ::std::string;
  }
  redirect_->assign(value);
}
inline void BlockResponse::set_redirect(const char* value) {
  set_has_redirect();
  if (redirect_ == &::google::protobuf::internal::kEmptyString) {
    redirect_ = new ::std::string;
  }
  redirect_->assign(value);
}
inline void BlockResponse::set_redirect(const char* value, size_t size) {
  set_has_redirect();
  if (redirect_ == &::google::protobuf::internal::kEmptyString) {
    redirect_ = new ::std::string;
  }
  redirect_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BlockResponse::mutable_redirect() {
  set_has_redirect();
  if (redirect_ == &::google::protobuf::internal::kEmptyString) {
    redirect_ = new ::std::string;
  }
  return redirect_;
}
inline ::std::string* BlockResponse::release_redirect() {
  clear_has_redirect();
  if (redirect_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = redirect_;
    redirect_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BlockResponse::set_allocated_redirect(::std::string* redirect) {
  if (redirect_ != &::google::protobuf::internal::kEmptyString) {
    delete redirect_;
  }
  if (redirect) {
    set_has_redirect();
    redirect_ = redirect;
  } else {
    clear_has_redirect();
    redirect_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace example

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_block_2eproto__INCLUDED
